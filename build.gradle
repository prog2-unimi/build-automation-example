plugins {
  id 'java'
  id 'jacoco'
  id 'com.diffplug.spotless' version '7.0.4'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
  mavenCentral()
}

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs.add('-Xlint:all')
  options.compilerArgs.add('-Werror') 
}

tasks.named('test') {
  useJUnitPlatform()
  testLogging {
    events 'skipped', 'failed'
    afterSuite { desc, result ->
      if (!desc.parent) {
        println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
  }
  defaultCharacterEncoding = 'UTF-8'
  finalizedBy jacocoTestReport
}

tasks.withType(JavaExec) {
  enableAssertions = !providers.systemProperty('disableAssertions').isPresent()
}

tasks.register('runClass', JavaExec) {
  dependsOn build
  group = 'Execution'
  description = 'Runs the main method of a class given its fully qualified name.'
  mainClass = providers.systemProperty('mainClass').getOrElse('my.pkg.Example')
  classpath = sourceSets.main.runtimeClasspath
  defaultCharacterEncoding = 'UTF-8'
}

javadoc {
  options {
    encoding = 'UTF-8'
    charSet = 'UTF-8'
    links = [ 'https://docs.oracle.com/en/java/javase/17/docs/api/' ]
    docTitle = 'Build Automation Tool Example'
    overview = 'src/overview.html'
    header = '<script type=\'text/javascript\' src=\'https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\'></script>'
    showFromPrivate()
    addBooleanOption 'Xdoclint:all', true
    addBooleanOption 'Werror', true
    addBooleanOption '-allow-script-in-comments', true
  }
}

spotless {
  enforceCheck = false
  java {
    googleJavaFormat('1.24.0')
    removeUnusedImports()
    leadingTabsToSpaces(2)
    endWithNewline()
    licenseHeaderFile 'src/licenseHeaderFile.txt'
  }
}

tasks.register('cleanActual', Delete) {
  delete fileTree('tests').matching {
    include '**/actual-*.txt'
  }
}

clean {
  dependsOn cleanActual
}
